@page "/cart"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@code {
    private List<CartItem> cartItems = new List<CartItem>
    {
        new CartItem { Id = 1, ImageUrl = "images/arduino.jpg", Name = "1/4 W Carbon Film Resistor (To'plamda 10 ta)", Quantity = 2, Price = 31000 },
        new CartItem { Id = 2, ImageUrl = "images/arduino.jpg", Name = "Arduino Uno R3 asosiy bloki", Quantity = 1, Price = 105000 },
    };

    private string phoneNumber = string.Empty;
    private string phoneNumberError = string.Empty;

    private void IncrementQuantity(CartItem item)
    {
        item.Quantity++;
        StateHasChanged();
    }

    private void DecrementQuantity(CartItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            StateHasChanged();
        }
    }

    private void RemoveItem(CartItem item)
    {
        cartItems.Remove(item);
        StateHasChanged();
    }

    private int CalculateTotal()
    {
        return cartItems.Sum(item => item.Quantity * item.Price);
    }

    private async Task Checkout()
    {
        if (cartItems.Count > 0)
        {
            // Show checkout confirmation modal
            await JSRuntime.InvokeVoidAsync("showCheckoutModal");
        }
    }

    private void ConfirmCheckout()
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            phoneNumberError = "Please enter your phone number.";
            StateHasChanged();
            return;
        }

        // Simulate checkout by clearing the cart
        cartItems.Clear();
        phoneNumber = string.Empty;
        phoneNumberError = string.Empty;
        StateHasChanged();
    }

    private class CartItem
    {
        public int Id { get; set; }
        public string? ImageUrl { get; set; }
        public string? Name { get; set; }
        public int Quantity { get; set; }
        public int Price { get; set; }
    }
}

<div class="cart-page">
    <h1>Shopping Cart</h1>
    @if (cartItems.Count == 0)
    {
        <p>Your cart is empty.</p>
    }
    else
    {
        <div class="cart-items">
            @foreach (var item in cartItems)
            {
                <div class="cart-item">
                    <img src="@item.ImageUrl" alt="@item.Name" class="cart-item-image" />
                    <div class="cart-item-info">
                        <h2>@item.Name</h2>
                        <p>Price: @item.Price.ToString("N0", CultureInfo.InvariantCulture) so'm</p>
                        <div class="cart-item-quantity">
                            <button class="quantity-btn" @onclick="() => DecrementQuantity(item)">-</button>
                            <span class="quantity-number">@item.Quantity</span>
                            <button class="quantity-btn" @onclick="() => IncrementQuantity(item)">+</button>
                        </div>
                        <button class="btn btn-danger" @onclick="() => RemoveItem(item)">Remove</button>
                    </div>
                    <div class="cart-item-total">
                        Total: @(item.Quantity * item.Price).ToString("N0", CultureInfo.InvariantCulture) so'm
                    </div>
                </div>
            }
        </div>
        <div class="cart-summary">
            <h2>Cart Summary</h2>
            <p>Total: @CalculateTotal().ToString("N0", CultureInfo.InvariantCulture) so'm</p>
            <button class="btn btn-primary" @onclick="Checkout">Checkout</button>
        </div>
    }
</div>

<!-- Bootstrap Modal for Checkout Confirmation -->
<div class="modal fade" id="checkoutModal" tabindex="-1" aria-labelledby="checkoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="checkoutModalLabel">Checkout Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="phoneNumber" class="form-label">Phone Number</label>
                    <input type="text" class="form-control" id="phoneNumber" @bind="phoneNumber" />
                    @if (!string.IsNullOrWhiteSpace(phoneNumberError))
                    {
                        <div class="text-danger">@phoneNumberError</div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmCheckout" data-bs-dismiss="modal">Confirm</button>
            </div>
        </div>
    </div>
</div>

