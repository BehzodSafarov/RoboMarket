@page "/login"
@using System.ComponentModel.DataAnnotations
@using RoboMarketPro.Services
@inject NavigationManager NavigationManager

@inject IUserService authService

<div class="login-page">
    <div class="login-container">
        <h1>Login</h1>
        <p>Iltimos Login va Parolingizni kiriting</p>
        
        <EditForm FormName="loginForm" Model="this" OnSubmit="Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (!string.IsNullOrEmpty(PhoneError))
            {
                <div class="alert alert-danger" role="alert">
                    @PhoneError
                </div>
            }
            <div class="form-group">
                <InputText id="phone" class="form-control phone-number-input" @bind-Value="PhoneNumber" placeholder="Phone Number" />
               
            </div>
            @if (!string.IsNullOrEmpty(PasswordError))
            {
                <div class="alert alert-danger" role="alert">
                    @PasswordError
                </div>
            }
            <div class="form-group">
                <InputText id="password" placeholder="Password" type="password" class="form-control" @bind-Value="Password" />
            </div>
           @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }
            <div class="form-group text-right">
                <a href="#">Forgot password?</a>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </EditForm>

        <div class="register-link">
            <p>Hali azo emasmisiz? <a href="/register">Register</a></p>
        </div>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    public string PhoneNumber { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    public string Password { get; set; } = string.Empty;

    public string? PhoneError {get; set;} = string.Empty;
    public string? ErrorMessage {get; set;} = string.Empty;
    public string? PasswordError {get; set;} = string.Empty;

    private void Submit()
    {
       ClearErrors();
       ValidateForm();
       var result =  authService.LoginAsync(PhoneNumber, Password );
       if(result.Result)
       {
           @* NavigationManager.NavigateTo("/"); *@
       }  
       else
       {
        ErrorMessage = "Telefon raqam yoki password xato";
       }
    }

    private void ClearErrors()
    {
        PhoneError = string.Empty;
        PasswordError = string.Empty;
    }
    private bool ValidateForm()
    {
        bool isValid = true;

        if (string.IsNullOrEmpty(PhoneNumber))
        {
            PhoneError = "Telefon raqami kiritilishi shart.";
            isValid = false;
        }
        else if (!System.Text.RegularExpressions.Regex.IsMatch(PhoneNumber, @"9"))
        {
            PhoneError = "Telefon raqami 912384625 formatda bo'lishi shart.";
            isValid = false;
        }

        if (string.IsNullOrEmpty(Password))
        {
            PasswordError = "Parol kiritilishi shart.";
            isValid = false;
        }
        else if (Password.Length < 6)
        {
            PasswordError = "Parol kamida 6 ta belgidan iborat bo'lishi kerak.";
            isValid = false;
        }

        return isValid;
    }

}
